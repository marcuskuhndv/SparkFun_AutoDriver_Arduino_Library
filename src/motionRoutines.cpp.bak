#include "motionRoutines.h"
#include <stdio.h>

extern AutoDriver myStepper;
extern char buffer[40];

static uint8_t convertPowerPercentageToKval(float valueToConvert) {

    if (valueToConvert > MAX_POWER_PERCENTAGE) {
        return Z_MOTOR_MAX_POWER;
    }

     valueToConvert = Z_MOTOR_MAX_POWER * (valueToConvert / 100.0f);

    if (valueToConvert < KVAL_REGISTER_RESOLUTION) {
        return Z_MOTOR_MIN_POWER;
    }

    return (uint8_t)valueToConvert;
}

static float convertPowerKvalToPercentage(uint8_t valueToConvert) {
    return (float)valueToConvert * 100 / Z_MOTOR_MAX_POWER;
}

bool homeZAxis(void) {

    //const uint32_t startTime = millis();

    //if (z_axis_homed()) {
        Serial.println("Moving out of Z-Axis sensor range");
        myStepper.setMaxSpeed(Z_HOMING_SPEED_MM_MIN);
        myStepper.run(Z_FORWARDS_DIR, Z_HOMING_SPEED_MM_MIN);
        while(myStepper.busyCheck());

        //while (z_axis_homed()) {
        //    if (!isMotionWithinTimeframe(Z_MOTOR_INDEX, startTime, Z_HOMING_TIMEOUT_SHORT_SEC)) { // short timeout since moving away from sensor should be pretty fast
        //        return false;
        //    }
        //}

        myStepper.softStop();
        while (myStepper.busyCheck());
        Serial.println("Cleared Z-Axis sensor range, stopping");
    //}

    //if (!z_axis_homed()) {
        Serial.println("Starting retraction to Z-Axis sensor");
        myStepper.setMaxSpeed(Z_HOMING_SPEED_MM_MIN);
        myStepper.run(Z_BACKWARDS_DIR, Z_HOMING_SPEED_MM_MIN);
        while (myStepper.busyCheck());

        //while (!z_axis_homed()) {
        //    if (!isMotionWithinTimeframe(Z_MOTOR_INDEX, startTime, Z_HOMING_TIMEOUT_DEFAULT_SEC)) {
        //        return false;
        //    }
        //} 

        myStepper.softStop();
        while (myStepper.busyCheck());
        Serial.println("Hit Z-Axis sensor at %.1fmm, moving to 0mm");
    //}

    //if (update_motor_position(g_modals->x, g_modals->y, Z_SENSOR_TRIP_DISTANCE, g_modals->a) && (system_issue_absolute_blocking_move(g_modals->x, g_modals->y, 0, g_modals->a, Z_HOMING_SPEED_MM_MIN))) {
    //    Serial.println("Z homed at 0mm");
    //    return true;
    //}

    return false;
}

static bool stroke_and_test_z(float stroke, int dwellMs, float feedRate) {
    
    // set motor feedrate
    myStepper.setMaxSpeed(feedRate);

    //this function should now assume we are sitting at the sensor trip point
    //it needs to simply move forward, check, and then move back
    
    float totalStrokeTime, strokeTimeUpper, strokeTimeLower, extendStrokeTime, retractStroketime;
    
    // calculate time (in ms) to extend
    extendStrokeTime = stroke / feedRate + dwellMs;
    
    // calculate time (in ms) to retract, excluding the time where the probe is past the Z sensor,
    // we will use the Z sensor to tell us how long the full move took
    retractStroketime = stroke / feedRate + dwellMs;

    totalStrokeTime = (extendStrokeTime + retractStroketime); // this is our total time in ms 
    
    // now that we know the total time, lets set up upper and lower boundaries so we can compare later
    strokeTimeUpper = totalStrokeTime + (totalStrokeTime/100) * BOUNDARY_PERCENTAGE; // if we take too long to hit the sensor
    strokeTimeLower = totalStrokeTime - (totalStrokeTime/100) * BOUNDARY_PERCENTAGE; // in case we stall on the extension, we would hit the sensor too soon on the way back
    
    sprintf(buffer, "Expected time to finish stroke: %.1fs", totalStrokeTime/1000); //print time in seconds
	Serial.println(buffer);
    
    // make sure we are homed before issuing next stroke
    //if (z_axis_homed()) {
        Serial.println("Z-axis was not homed prior to stroke!");
        return false;
    //}
    
    long stepsToMove = (stroke * STEP_FACTOR * Z_STEPS_PER_REV) / Z_SCREW_PITCH;

    const uint32_t startTime = millis();     // save start time
    uint32_t operationTime = 0;

    //move away from sensor, issue extend command
    Serial.println("Extension/retraction started");
    myStepper.move(FWD, stepsToMove);
	while (myStepper.busyCheck());
    
    //if (any_motor_flag_set(g_allMotors)) {
    //    DV_error("Motor flag set during extension");
    //}
    
    //if (z_axis_homed()) { //past means inside the range... or that the axis was still homed
        return false;
    //}
    
    Serial.println("Extension complete, delaying, then retracting...");
    delay(dwellMs);
    
    //now move toward sensor, issue retract command
    myStepper.move(REV, stepsToMove);
    
    //if (any_motor_flag_set(g_allMotors)){
    //    DV_error("Motor flag set during retraction");
    //}
    
    //while (!z_axis_homed()) {
        operationTime = millis() - startTime; // save time taken in ms while we havent hit the sensor
        
        // keep checking if it has stalled and is taking too long to hit the sensor
        if(operationTime > strokeTimeUpper) {
            while (myStepper.busyCheck()); // prevent from finishing loop while probe is still moving
            Serial.println("Retraction exceeded expected time, likely stalled on retraction");
            return false;
        }
    //}

    // we've hit the sensor, check if it was too soon
    if(operationTime < strokeTimeLower) {
        while (myStepper.busyCheck()); // prevent from finishing loop while probe is still moving
        Serial.println("Retracted under expected time, likely stalled on extension");
        return false;
    }
    
    while (myStepper.busyCheck()); // prevent from finishing loop while probe is still moving
    
    return true;
}

bool runMotionTest(float stroke, float feedRate, float startingPower, int dwellMs) {

    uint8_t currentPower, lowPowerFail, highPowerPass;
    currentPower = 0;
    lowPowerFail = 0;
    highPowerPass = Z_MOTOR_MAX_POWER;
    
    float percentagePower = 0;
    
    bool foundStallPoint, powerTestPass;
    foundStallPoint = false;
    powerTestPass = true;
    
    if (startingPower <= Z_MOTOR_MAX_POWER) {
        currentPower = convertPowerPercentageToKval(startingPower);
    }
    else {
        currentPower = Z_MOTOR_MAX_POWER;
    }

    while(!foundStallPoint && currentPower > 0) {
        percentagePower = convertPowerPercentageToKval(currentPower);
        sprintf(buffer, "Setting ACC, DEC, RUN Kvals to %#X, or %.1f percent", currentPower, percentagePower);
		Serial.println(buffer);
        
        setPowerKvals(currentPower);

        Serial.println("Testing...");
        
        powerTestPass = stroke_and_test_z(stroke, dwellMs, feedRate); // get power test result
        

		if (!powerTestPass) { // more torque is needed
		
			Serial.println("Power Too Low!");
		
			// set motor parameters to max power
			setPowerKvals(Z_POWER_NOS_MODE);
		
			Serial.println("Re-homing Z axis to corrected position on NOS Mode");
		
			if(!homeZAxis()) {
				Serial.println("Homing Failed, aborting test");
				return false;
			}
		
			Serial.println("System Homed");
		
			// set the smallest available power % to just over the last one that failed
			lowPowerFail = currentPower + 1;
		}
		else {	// if it passed, we need to try it with less power
			// set highest available power % to the max we tested with, and passed
			Serial.println("Passed");
			highPowerPass = currentPower;
		}

		// set test value to the mid point of the current range
		currentPower = (uint8_t)((lowPowerFail + highPowerPass) / 2);

		// the stall point is found when lowPowerFail is equal to highPowerPass
		// i.e. 24% power stalls, so lowPowerFail is set to 25%, but 25% power is good, therefore 25% is our stall point

		if (lowPowerFail >= highPowerPass) {
			foundStallPoint = true;
		}
    }

    float finalStallPoint = convertPowerKvalToPercentage(currentPower);
    sprintf(buffer, "Stall point found for z axis at %.1f percent configured current", finalStallPoint);
    Serial.println(buffer);
	
    sprintf(buffer, "Stalling current kval: hex: %#X", currentPower);
    Serial.println(buffer);

    // re-set kVals to pre-test values
    setPowerKvals(Z_MOTOR_MAX_POWER);

    return true;
}


void setPowerKvals(uint8_t configValuePercentage) {
    uint8_t configValueKval = convertPowerPercentageToKval(configValuePercentage);
    myStepper.setAccKVAL(configValueKval);
    myStepper.setDecKVAL(configValueKval);
    myStepper.setRunKVAL(configValueKval);
}